# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-15
    env:
      APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
      APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
      APPLE_DEVELOPER_PORTAL_TEAM_ID: ${{ secrets.APPLE_DEVELOPER_PORTAL_TEAM_ID }}
      APPLE_STORE_CONNECT_TEAM_ID: ${{ secrets.APPLE_STORE_CONNECT_TEAM_ID }}
      APPLE_P8_AUTH_KEY: ${{ secrets.APPLE_P8_AUTH_KEY }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with: 
          repository: ${{ secrets.REPOSITORY }}
          token: ${{ secrets.PAT }}
          path: './'

      - uses: actions/setup-node@v4
        with:
          node-version: 22.14.0

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4.0
          
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('./yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('./yarn.lock') }}

      - uses: actions/cache@v4
        id: vendor-cache # use this to check for `cache-hit` (`steps.vendor-cache.outputs.cache-hit != 'true'`)
        with:
          path: ./vendor
          key: ${{ runner.os }}-ios-vendor-${{ hashFiles('./Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-ios-vendor-${{ hashFiles('./Gemfile.lock') }}

      - uses: actions/cache@v4
        with:
          path: ./ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}

      - name: Install Dependencies
        run: |
          yarn
          cd ios
          bundle install
          bundle exec pod install

      - name: Build and deploy
        run: |
          cd ios
          pwd
          echo "${{ secrets.APPLE_P8_AUTH_KEY }}" > fastlane/secretKey.p8
          bundle exec fastlane ios internal
        env:
          RUBYOPT: '-rostruct' # TODO: Remove when https://github.com/fastlane/fastlane/pull/21950 gets released
        
